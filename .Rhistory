alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
}
}
rm(M1x1)
rm(M5x1)
resultado <- foreach(j  = length(xr[1,]), .combine = 'cbind') %dopar%
{
for(i in 1:length(M))
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[1,j] , n[1], n_[1] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
}
}
xr[1,]
foreach(j = 1:length(xr[1,]), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[1,j] , n[1], n_[1] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
resultado <- foreach(j = 1:length(xr[1,]), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[1,j] , n[1], n_[1] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
head(resultado)
mean(resultado[,1])
mean(resultado[,2])
mean(resultado[,3])
mean(resultado[,4])
mean(resultado[,5])
mean(resultado[,6])
Nsim = 1000
resultado <- foreach(j = 1:length(xr[1,]), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[1,j] , n[1], n_[1] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
apply(resultado, 2, mean)
xr
resultado2 <- foreach(j = 1:length(xr[2,]), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[2,j] , n[2], n_[2] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[2] ,
n_ = n_[2],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[2] ,
n_ = n_[2],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[2,j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
apply(resultados2, 2, mean)
apply(resultado2, 2, mean)
ini_1 = c(0.5,0.5,80)
teste <- foreach(j = 1:length(xr[1,]), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[1,j] , n[1], n_[1] , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1] ,
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n[1],
n_ = n_[1],
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[1,j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
apply(teste, 2, mean)
n_100 <- resultado
n_1000 <- resultado2
colnames(n_100)
colnames(n_100) <- c("1_0.01", "5_0.01", "1_0.01", "5_0.99", "1_0.01", "5_0.99")
head(n_100)
colnames(n_100) <- c("1_0.01", "5_0.01", "1_0.5", "5_0.5", "1_0.99", "5_0.99")
head(n_100)
colnames(n_1000) <- c("1_0.01", "5_0.01", "1_0.5", "5_0.5", "1_0.99", "5_0.99")
save(n_100, n_1000, file = 'Augusto/Simulações/Rcpp/Resultados_Metropolis/M/n_100_n1000/resultados.RData')
library(magrittr)
source(file = '/home/est/Augusto/Simulações/Rcpp/Metropolis/ger_sin.R')
gama1 <- 1     # par?metro da priori p
gama2 <-  1    # par?metro da priori p
n <- 1000
n_ <- 100
c <- 0               # constante p/ o alfa
M <- c(1,5)    # n?mero de bancos sint?ticos
eps <- 2/M     # Epsilon do differential privacy
alfa1 <- c + n_ / ( exp(eps) - 1 )     # Par?metro da priori de p_
alfa2 <- alfa1     # par?metro da prior p_
itr <- 2000 # N?mero de itera??es do MCMC
burnin <- 1000
xr <- (n %*% t(c(0.01, 0.5, 0.99)))               # Estat?stica suficiente sum(x_i)
ini_1 = c(0.5,0.5,30)
L = 11
Nsim = 1000
xr
xr <- n * c(0.01, 0.5, 0.99)              # Estat?stica suficiente sum(x_i)
xr
999/1000
ntil_100 <- foreach(j = 1:length(xr), .combine = 'cbind') %dopar%
{
foreach(i = 1:length(M), .combine = 'cbind') %do%
{
for(h in 1:Nsim)
{
x_m <- ger_sin( xr[j] , n, n_ , M[i], alfa1[i], alfa2[i])
if (h == 1)
{
resultados_met <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n ,
n_ = n_,
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
}else{
aux <- metropolisn_charest(itr = itr,
burnin = burnin,
thin = 20,
ini = ini_1,
L = L,
n = n,
n_ = n_,
x_m = x_m,
alpha1 = alfa1[i],
alpha2 = alfa2[i],
gama1 = gama1,
gama2 = gama2)
resultados_met <- c(resultados_met, aux)
}
}
name_sim <- paste0('M',M[i],'x',xr[j])
assign(name_sim, resultados_met)
get(name_sim)
}
}
apply(ntil_100, 2, mean)
save(ntil_100, file = 'Augusto/Simulações/Rcpp/Resultados_Metropolis/M/ntil_100.RData')
if (!require("devtools")) install.packages("devtools")
devtools::install_github("Cepesp-Fgv/cepesp-r")
library(cepespR)
df <- votes(year = 2014,regional_aggregation=3, political_aggregation=2, position=1)
?cepespR
df <- votes(year = 2014,regional_aggregation=3, political_aggregation=2, position=1)
df <- votes(year = 2014,regional_aggregation=3, political_aggregation=2, position=1)
?votes
df <- votes(year = 2014,regional_aggregation=3, political_aggregation=2, position=1)
setwd("~/Augusto/Github_S4g/site_r/site")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
setwd("~/Augusto/Github_S4g/site_r/site")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
library(ggplot2)
library(plotly)
library(ggthemes)
library(rbenchmark)
library(foreach)
library(parallel)
library(doMC)
library(mvtnorm)
library(e1071)
install.packages(e1071)
install.packages('e1071')
blogdown::serve_site()
blogdown::serve_site()
warnings()
blogdown::serve_site()
blogdown::serve_site()
4*60+43
59/283
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
require(blogdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
library(ggplot2)
library(knitr)
library(ggplot2)
library(knitr)
library(ggplot2)
library(knitr)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
require(blogdown)
server_site()
blogdown::build_site()
require(blogdown)
serve_site
serve_site()
build_site()
